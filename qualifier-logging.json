
{
  "trace": [{"event": {"$type": "TypeMap", "from": "?4(it)", "result": "?4(it)"}, "children": []},{"event": {"$type": "TypeMap", "from": "?4(it)", "result": "?4(it)"}, "children": []},{"event": {"$type": "TypeMap", "from": "?4(it)", "result": "?4(it)"}, "children": []},{"event": {"$type": "TypeMap", "from": "it < 10", "result": "it < 10"}, "children": []},{"event": {"$type": "TypeMap", "from": "?7(it)", "result": "?7(it)"}, "children": []},{"event": {"$type": "TypeMap", "from": "?7(it)", "result": "?7(it)"}, "children": []},{"event": {"$type": "TypeMap", "from": "?7(it)", "result": "?7(it)"}, "children": []},{"event": {"$type": "TypeMap", "from": "it >= 0", "result": "it >= 0"}, "children": []},{"event": {"$type": "TypeMap", "from": "?10(it)", "result": "?10(it)"}, "children": []},{"event": {"$type": "TypeMap", "from": "?10(it)", "result": "?10(it)"}, "children": []},{"event": {"$type": "TypeMap", "from": "?10(it)", "result": "?10(it)"}, "children": []},{"event": {"$type": "CheckExprConforms", "from": "listConcat$package", "to": "SelectionProto(_,WildcardType(NoType),dotty.tools.dotc.typer.ProtoTypes$NoViewsAllowed$@115c946b,true,<no position>)", "result": "listConcat$package"}, "children": []},{"event": {"$type": "CheckExprConforms", "from": "(listConcat$package#<init> : (): listConcat$package)", "to": "WildcardType(NoType)", "result": "(listConcat$package#<init> : (): listConcat$package)"}, "children": []},{"event": {"$type": "CheckExprConforms", "from": "listConcat$package", "to": "TypeRef(ThisType(TypeRef(NoPrefix,module class <empty>)),module class listConcat$package$)", "result": "listConcat$package"}, "children": []},{"event": {"$type": "CheckExprConforms", "from": "Object", "to": "SelectionProto(_,WildcardType(NoType),dotty.tools.dotc.typer.ProtoTypes$NoViewsAllowed$@115c946b,true,<no position>)", "result": "Object"}, "children": []},{"event": {"$type": "CheckExprConforms", "from": "(Object#<init> : (): Object)", "to": "WildcardType(NoType)", "result": "(Object#<init> : (): Object)"}, "children": []},{"event": {"$type": "CheckExprConforms", "from": "Object", "to": "WildcardType(NoType)", "result": "Object"}, "children": []},{"event": {"$type": "CheckExprConforms", "from": "scala.runtime.ModuleSerializationProxy", "to": "SelectionProto(_,WildcardType(NoType),dotty.tools.dotc.typer.ProtoTypes$NoViewsAllowed$@115c946b,true,<no position>)", "result": "scala.runtime.ModuleSerializationProxy"}, "children": []},{"event": {"$type": "CheckExprConforms", "from": "(scala.runtime.ModuleSerializationProxy#<init> :\n  (moduleClass: Class[?]): scala.runtime.ModuleSerializationProxy)", "to": "WildcardType(NoType)", "result": "(scala.runtime.ModuleSerializationProxy#<init> :\n  (moduleClass: Class[?]): scala.runtime.ModuleSerializationProxy)"}, "children": []},{"event": {"$type": "CheckExprConforms", "from": "(classOf[listConcat$package.type] : Class[listConcat$package.type])", "to": "AppliedType(TypeRef(ThisType(TypeRef(NoPrefix,module class lang)),class Class),List(TypeBounds(TypeRef(ThisType(TypeRef(NoPrefix,module class scala)),class Nothing),TypeRef(ThisType(TypeRef(NoPrefix,module class scala)),class Any))))", "result": "(classOf[listConcat$package.type] : Class[listConcat$package.type])"}, "children": []},{"event": {"$type": "CheckExprConforms", "from": "scala.runtime.ModuleSerializationProxy", "to": "TypeRef(ThisType(TypeRef(NoPrefix,module class scala)),type AnyRef)", "result": "scala.runtime.ModuleSerializationProxy"}, "children": []},{"event": {"$type": "CheckExprConforms", "from": "(List : scala.collection.immutable.List.type)", "to": "SelectionProto(_,WildcardType(NoType),dotty.tools.dotc.typer.ProtoTypes$NoViewsAllowed$@115c946b,true,<no position>)", "result": "(List : scala.collection.immutable.List.type)"}, "children": []},{"event": {"$type": "CheckExprConforms", "from": "(List.apply : [A](elems: Seq[A]): List[A])", "to": "WildcardType(NoType)", "result": "(List.apply : [A](elems: Seq[A]): List[A])"}, "children": []},{"event": {"$type": "TypeMap", "from": "?4(it)", "result": "?4(it)"}, "children": []},{"event": {"$type": "TypeMap", "from": "?4(it)", "result": "?4(it)"}, "children": []},{"event": {"$type": "CheckExprConforms", "from": "(elems: Seq[(Int with ?4(it))]): List[(Int with ?4(it))]", "to": "WildcardType(NoType)", "result": "(elems: Seq[(Int with ?4(it))]): List[(Int with ?4(it))]"}, "children": []},{"event": {"$type": "CheckExprConforms", "from": "(1 : Int)", "to": "AnnotatedType(TypeRef(ThisType(TypeRef(NoPrefix,module class scala)),class Int),QualifiedAnnotation(ApplyVar(4,PredArg),TypeRef(ThisType(TypeRef(NoPrefix,module class scala)),class Int)))", "result": "(1 : Int)"}, "children": [{"event": {"$type": "OfType", "from": "(1 : Int)", "result": "it == 1"}, "children": []},{"event": {"$type": "OfType", "from": "(Int with ?4(it))", "result": "?4(it)"}, "children": [{"event": {"$type": "OfType", "from": "Int", "result": "true"}, "children": [{"event": {"$type": "OfType", "from": "AnyVal {...}", "result": "true"}, "children": []}]}]},{"event": {"$type": "Push", "currentFacts": "true"}, "children": [{"event": {"$type": "Assume", "expr": "it == 1"}, "children": []},{"event": {"$type": "Check", "from": "it == 1", "to": "?4(it)", "result": "true"}, "children": [{"event": {"$type": "TryImply", "from": "it == 1", "to": "?4(it)", "frozen": "true", "result": "false"}, "children": []},{"event": {"$type": "TryImply", "from": "it == 1", "to": "?4(it)", "frozen": "false", "result": "true"}, "children": [{"event": {"$type": "TryAddImplicationToVar", "from": "it == 1", "to": "?4(it)", "result": "true"}, "children": []}]}]}]}]},{"event": {"$type": "CheckExprConforms", "from": "(2 : Int)", "to": "AnnotatedType(TypeRef(ThisType(TypeRef(NoPrefix,module class scala)),class Int),QualifiedAnnotation(ApplyVar(4,PredArg),TypeRef(ThisType(TypeRef(NoPrefix,module class scala)),class Int)))", "result": "(2 : Int)"}, "children": [{"event": {"$type": "OfType", "from": "(2 : Int)", "result": "it == 2"}, "children": []},{"event": {"$type": "OfType", "from": "(Int with ?4(it))", "result": "?4(it)"}, "children": [{"event": {"$type": "OfType", "from": "Int", "result": "true"}, "children": [{"event": {"$type": "OfType", "from": "AnyVal {...}", "result": "true"}, "children": []}]}]},{"event": {"$type": "Push", "currentFacts": "true"}, "children": [{"event": {"$type": "Assume", "expr": "it == 2"}, "children": []},{"event": {"$type": "Check", "from": "it == 2", "to": "?4(it)", "result": "true"}, "children": [{"event": {"$type": "TryImply", "from": "it == 2", "to": "?4(it)", "frozen": "true", "result": "false"}, "children": []},{"event": {"$type": "TryImply", "from": "it == 2", "to": "?4(it)", "frozen": "false", "result": "true"}, "children": [{"event": {"$type": "TryAddImplicationToVar", "from": "it == 2", "to": "?4(it)", "result": "true"}, "children": []}]}]}]}]},{"event": {"$type": "CheckExprConforms", "from": "(3 : Int)", "to": "AnnotatedType(TypeRef(ThisType(TypeRef(NoPrefix,module class scala)),class Int),QualifiedAnnotation(ApplyVar(4,PredArg),TypeRef(ThisType(TypeRef(NoPrefix,module class scala)),class Int)))", "result": "(3 : Int)"}, "children": [{"event": {"$type": "OfType", "from": "(3 : Int)", "result": "it == 3"}, "children": []},{"event": {"$type": "OfType", "from": "(Int with ?4(it))", "result": "?4(it)"}, "children": [{"event": {"$type": "OfType", "from": "Int", "result": "true"}, "children": [{"event": {"$type": "OfType", "from": "AnyVal {...}", "result": "true"}, "children": []}]}]},{"event": {"$type": "Push", "currentFacts": "true"}, "children": [{"event": {"$type": "Assume", "expr": "it == 3"}, "children": []},{"event": {"$type": "Check", "from": "it == 3", "to": "?4(it)", "result": "true"}, "children": [{"event": {"$type": "TryImply", "from": "it == 3", "to": "?4(it)", "frozen": "true", "result": "false"}, "children": []},{"event": {"$type": "TryImply", "from": "it == 3", "to": "?4(it)", "frozen": "false", "result": "true"}, "children": [{"event": {"$type": "TryAddImplicationToVar", "from": "it == 3", "to": "?4(it)", "result": "true"}, "children": []}]}]}]}]},{"event": {"$type": "CheckExprConforms", "from": "Seq[Int]", "to": "AppliedType(TypeRef(ThisType(TypeRef(NoPrefix,module class immutable)),trait Seq),List(AnnotatedType(TypeRef(ThisType(TypeRef(NoPrefix,module class scala)),class Int),QualifiedAnnotation(ApplyVar(4,PredArg),TypeRef(ThisType(TypeRef(NoPrefix,module class scala)),class Int)))))", "result": "Seq[Int]"}, "children": [{"event": {"$type": "OfType", "from": "Int", "result": "true"}, "children": [{"event": {"$type": "OfType", "from": "AnyVal {...}", "result": "true"}, "children": []}]},{"event": {"$type": "OfType", "from": "(Int with ?4(it))", "result": "?4(it)"}, "children": [{"event": {"$type": "OfType", "from": "Int", "result": "true"}, "children": [{"event": {"$type": "OfType", "from": "AnyVal {...}", "result": "true"}, "children": []}]}]},{"event": {"$type": "Push", "currentFacts": "true"}, "children": [{"event": {"$type": "Assume", "expr": "true"}, "children": []},{"event": {"$type": "Check", "from": "true", "to": "?4(it)", "result": "true"}, "children": [{"event": {"$type": "TryImply", "from": "true", "to": "?4(it)", "frozen": "true", "result": "false"}, "children": []},{"event": {"$type": "TryImply", "from": "true", "to": "?4(it)", "frozen": "false", "result": "true"}, "children": [{"event": {"$type": "TryAddImplicationToVar", "from": "true", "to": "?4(it)", "result": "true"}, "children": []}]}]}]}]},{"event": {"$type": "CheckExprConforms", "from": "List[(Int with ?4(it))]", "to": "WildcardType(NoType)", "result": "List[(Int with ?4(it))]"}, "children": []},{"event": {"$type": "CheckExprConforms", "from": "(List[(Int with ?4(it))]#asInstanceOf : [X0]: X0)", "to": "WildcardType(NoType)", "result": "(List[(Int with ?4(it))]#asInstanceOf : [X0]: X0)"}, "children": []},{"event": {"$type": "CheckExprConforms", "from": "List[(Int with it < 10)]", "to": "AnnotatedType(AppliedType(TypeRef(ThisType(TypeRef(NoPrefix,module class immutable)),class List),List(AnnotatedType(TypeRef(TermRef(ThisType(TypeRef(NoPrefix,module class <root>)),object scala),class Int),QualifiedAnnotation(ApplyVar(2,PredArg),TypeRef(TermRef(ThisType(TypeRef(NoPrefix,module class <root>)),object scala),class Int))))),QualifiedAnnotation(ApplyVar(3,PredArg),AppliedType(TypeRef(ThisType(TypeRef(NoPrefix,module class immutable)),class List),List(AnnotatedType(TypeRef(TermRef(ThisType(TypeRef(NoPrefix,module class <root>)),object scala),class Int),QualifiedAnnotation(ApplyVar(2,PredArg),TypeRef(TermRef(ThisType(TypeRef(NoPrefix,module class <root>)),object scala),class Int)))))))", "result": "List[(Int with it < 10)]"}, "children": [{"event": {"$type": "OfType", "from": "(Int with it < 10)", "result": "it < 10"}, "children": [{"event": {"$type": "OfType", "from": "Int", "result": "true"}, "children": [{"event": {"$type": "OfType", "from": "AnyVal {...}", "result": "true"}, "children": []}]}]},{"event": {"$type": "OfType", "from": "(Int with ?2(it))", "result": "?2(it)"}, "children": [{"event": {"$type": "OfType", "from": "Int", "result": "true"}, "children": [{"event": {"$type": "OfType", "from": "AnyVal {...}", "result": "true"}, "children": []}]}]},{"event": {"$type": "Push", "currentFacts": "true"}, "children": [{"event": {"$type": "Assume", "expr": "it < 10"}, "children": []},{"event": {"$type": "Check", "from": "it < 10", "to": "?2(it)", "result": "true"}, "children": [{"event": {"$type": "TryImply", "from": "it < 10", "to": "?2(it)", "frozen": "true", "result": "false"}, "children": []},{"event": {"$type": "TryImply", "from": "it < 10", "to": "?2(it)", "frozen": "false", "result": "true"}, "children": [{"event": {"$type": "TryAddImplicationToVar", "from": "it < 10", "to": "?2(it)", "result": "true"}, "children": []}]}]}]},{"event": {"$type": "OfType", "from": "List[(Int with it < 10)]", "result": "true"}, "children": [{"event": {"$type": "OfType", "from": "List", "result": "true"}, "children": [{"event": {"$type": "OfType", "from": "scala.collection.immutable.AbstractSeq[A] with \n  scala.collection.immutable.LinearSeq[A] with \n  scala.collection.immutable.LinearSeqOps[A, List, List[A]] with \n  scala.collection.StrictOptimizedLinearSeqOps[A, List, List[A]] with \n  scala.collection.immutable.StrictOptimizedSeqOps[A, List, List[A]] with \n  scala.collection.IterableFactoryDefaults[A, List] with \n  scala.collection.generic.DefaultSerializable {...}", "result": "true"}, "children": []}]}]},{"event": {"$type": "OfType", "from": "(List[(Int with ?2(it))] with ?3(it))", "result": "?3(it)"}, "children": [{"event": {"$type": "OfType", "from": "List[(Int with ?2(it))]", "result": "true"}, "children": [{"event": {"$type": "OfType", "from": "List", "result": "true"}, "children": [{"event": {"$type": "OfType", "from": "scala.collection.immutable.AbstractSeq[A] with \n  scala.collection.immutable.LinearSeq[A] with \n  scala.collection.immutable.LinearSeqOps[A, List, List[A]] with \n  scala.collection.StrictOptimizedLinearSeqOps[A, List, List[A]] with \n  scala.collection.immutable.StrictOptimizedSeqOps[A, List, List[A]] with \n  scala.collection.IterableFactoryDefaults[A, List] with \n  scala.collection.generic.DefaultSerializable {...}", "result": "true"}, "children": []}]}]}]},{"event": {"$type": "Push", "currentFacts": "true"}, "children": [{"event": {"$type": "Assume", "expr": "true"}, "children": []},{"event": {"$type": "Check", "from": "true", "to": "?3(it)", "result": "true"}, "children": [{"event": {"$type": "TryImply", "from": "true", "to": "?3(it)", "frozen": "true", "result": "false"}, "children": []},{"event": {"$type": "TryImply", "from": "true", "to": "?3(it)", "frozen": "false", "result": "true"}, "children": [{"event": {"$type": "TryAddImplicationToVar", "from": "true", "to": "?3(it)", "result": "true"}, "children": []}]}]}]}]},{"event": {"$type": "CheckExprConforms", "from": "(List : scala.collection.immutable.List.type)", "to": "SelectionProto(_,WildcardType(NoType),dotty.tools.dotc.typer.ProtoTypes$NoViewsAllowed$@115c946b,true,<no position>)", "result": "(List : scala.collection.immutable.List.type)"}, "children": []},{"event": {"$type": "CheckExprConforms", "from": "(List.apply : [A](elems: Seq[A]): List[A])", "to": "WildcardType(NoType)", "result": "(List.apply : [A](elems: Seq[A]): List[A])"}, "children": []},{"event": {"$type": "TypeMap", "from": "?7(it)", "result": "?7(it)"}, "children": []},{"event": {"$type": "TypeMap", "from": "?7(it)", "result": "?7(it)"}, "children": []},{"event": {"$type": "CheckExprConforms", "from": "(elems: Seq[(Int with ?7(it))]): List[(Int with ?7(it))]", "to": "WildcardType(NoType)", "result": "(elems: Seq[(Int with ?7(it))]): List[(Int with ?7(it))]"}, "children": []},{"event": {"$type": "CheckExprConforms", "from": "(0 : Int)", "to": "AnnotatedType(TypeRef(ThisType(TypeRef(NoPrefix,module class scala)),class Int),QualifiedAnnotation(ApplyVar(7,PredArg),TypeRef(ThisType(TypeRef(NoPrefix,module class scala)),class Int)))", "result": "(0 : Int)"}, "children": [{"event": {"$type": "OfType", "from": "(0 : Int)", "result": "it == 0"}, "children": []},{"event": {"$type": "OfType", "from": "(Int with ?7(it))", "result": "?7(it)"}, "children": [{"event": {"$type": "OfType", "from": "Int", "result": "true"}, "children": [{"event": {"$type": "OfType", "from": "AnyVal {...}", "result": "true"}, "children": []}]}]},{"event": {"$type": "Push", "currentFacts": "true"}, "children": [{"event": {"$type": "Assume", "expr": "it == 0"}, "children": []},{"event": {"$type": "Check", "from": "it == 0", "to": "?7(it)", "result": "true"}, "children": [{"event": {"$type": "TryImply", "from": "it == 0", "to": "?7(it)", "frozen": "true", "result": "false"}, "children": []},{"event": {"$type": "TryImply", "from": "it == 0", "to": "?7(it)", "frozen": "false", "result": "true"}, "children": [{"event": {"$type": "TryAddImplicationToVar", "from": "it == 0", "to": "?7(it)", "result": "true"}, "children": []}]}]}]}]},{"event": {"$type": "CheckExprConforms", "from": "(2 : Int)", "to": "AnnotatedType(TypeRef(ThisType(TypeRef(NoPrefix,module class scala)),class Int),QualifiedAnnotation(ApplyVar(7,PredArg),TypeRef(ThisType(TypeRef(NoPrefix,module class scala)),class Int)))", "result": "(2 : Int)"}, "children": [{"event": {"$type": "OfType", "from": "(2 : Int)", "result": "it == 2"}, "children": []},{"event": {"$type": "OfType", "from": "(Int with ?7(it))", "result": "?7(it)"}, "children": [{"event": {"$type": "OfType", "from": "Int", "result": "true"}, "children": [{"event": {"$type": "OfType", "from": "AnyVal {...}", "result": "true"}, "children": []}]}]},{"event": {"$type": "Push", "currentFacts": "true"}, "children": [{"event": {"$type": "Assume", "expr": "it == 2"}, "children": []},{"event": {"$type": "Check", "from": "it == 2", "to": "?7(it)", "result": "true"}, "children": [{"event": {"$type": "TryImply", "from": "it == 2", "to": "?7(it)", "frozen": "true", "result": "false"}, "children": []},{"event": {"$type": "TryImply", "from": "it == 2", "to": "?7(it)", "frozen": "false", "result": "true"}, "children": [{"event": {"$type": "TryAddImplicationToVar", "from": "it == 2", "to": "?7(it)", "result": "true"}, "children": []}]}]}]}]},{"event": {"$type": "CheckExprConforms", "from": "(3 : Int)", "to": "AnnotatedType(TypeRef(ThisType(TypeRef(NoPrefix,module class scala)),class Int),QualifiedAnnotation(ApplyVar(7,PredArg),TypeRef(ThisType(TypeRef(NoPrefix,module class scala)),class Int)))", "result": "(3 : Int)"}, "children": [{"event": {"$type": "OfType", "from": "(3 : Int)", "result": "it == 3"}, "children": []},{"event": {"$type": "OfType", "from": "(Int with ?7(it))", "result": "?7(it)"}, "children": [{"event": {"$type": "OfType", "from": "Int", "result": "true"}, "children": [{"event": {"$type": "OfType", "from": "AnyVal {...}", "result": "true"}, "children": []}]}]},{"event": {"$type": "Push", "currentFacts": "true"}, "children": [{"event": {"$type": "Assume", "expr": "it == 3"}, "children": []},{"event": {"$type": "Check", "from": "it == 3", "to": "?7(it)", "result": "true"}, "children": [{"event": {"$type": "TryImply", "from": "it == 3", "to": "?7(it)", "frozen": "true", "result": "false"}, "children": []},{"event": {"$type": "TryImply", "from": "it == 3", "to": "?7(it)", "frozen": "false", "result": "true"}, "children": [{"event": {"$type": "TryAddImplicationToVar", "from": "it == 3", "to": "?7(it)", "result": "true"}, "children": []}]}]}]}]},{"event": {"$type": "CheckExprConforms", "from": "Seq[Int]", "to": "AppliedType(TypeRef(ThisType(TypeRef(NoPrefix,module class immutable)),trait Seq),List(AnnotatedType(TypeRef(ThisType(TypeRef(NoPrefix,module class scala)),class Int),QualifiedAnnotation(ApplyVar(7,PredArg),TypeRef(ThisType(TypeRef(NoPrefix,module class scala)),class Int)))))", "result": "Seq[Int]"}, "children": [{"event": {"$type": "OfType", "from": "Int", "result": "true"}, "children": [{"event": {"$type": "OfType", "from": "AnyVal {...}", "result": "true"}, "children": []}]},{"event": {"$type": "OfType", "from": "(Int with ?7(it))", "result": "?7(it)"}, "children": [{"event": {"$type": "OfType", "from": "Int", "result": "true"}, "children": [{"event": {"$type": "OfType", "from": "AnyVal {...}", "result": "true"}, "children": []}]}]},{"event": {"$type": "Push", "currentFacts": "true"}, "children": [{"event": {"$type": "Assume", "expr": "true"}, "children": []},{"event": {"$type": "Check", "from": "true", "to": "?7(it)", "result": "true"}, "children": [{"event": {"$type": "TryImply", "from": "true", "to": "?7(it)", "frozen": "true", "result": "false"}, "children": []},{"event": {"$type": "TryImply", "from": "true", "to": "?7(it)", "frozen": "false", "result": "true"}, "children": [{"event": {"$type": "TryAddImplicationToVar", "from": "true", "to": "?7(it)", "result": "true"}, "children": []}]}]}]}]},{"event": {"$type": "CheckExprConforms", "from": "List[(Int with ?7(it))]", "to": "WildcardType(NoType)", "result": "List[(Int with ?7(it))]"}, "children": []},{"event": {"$type": "CheckExprConforms", "from": "(List[(Int with ?7(it))]#asInstanceOf : [X0]: X0)", "to": "WildcardType(NoType)", "result": "(List[(Int with ?7(it))]#asInstanceOf : [X0]: X0)"}, "children": []},{"event": {"$type": "CheckExprConforms", "from": "List[(Int with it >= 0)]", "to": "AnnotatedType(AppliedType(TypeRef(ThisType(TypeRef(NoPrefix,module class immutable)),class List),List(AnnotatedType(TypeRef(TermRef(ThisType(TypeRef(NoPrefix,module class <root>)),object scala),class Int),QualifiedAnnotation(ApplyVar(5,PredArg),TypeRef(TermRef(ThisType(TypeRef(NoPrefix,module class <root>)),object scala),class Int))))),QualifiedAnnotation(ApplyVar(6,PredArg),AppliedType(TypeRef(ThisType(TypeRef(NoPrefix,module class immutable)),class List),List(AnnotatedType(TypeRef(TermRef(ThisType(TypeRef(NoPrefix,module class <root>)),object scala),class Int),QualifiedAnnotation(ApplyVar(5,PredArg),TypeRef(TermRef(ThisType(TypeRef(NoPrefix,module class <root>)),object scala),class Int)))))))", "result": "List[(Int with it >= 0)]"}, "children": [{"event": {"$type": "OfType", "from": "(Int with it >= 0)", "result": "it >= 0"}, "children": [{"event": {"$type": "OfType", "from": "Int", "result": "true"}, "children": [{"event": {"$type": "OfType", "from": "AnyVal {...}", "result": "true"}, "children": []}]}]},{"event": {"$type": "OfType", "from": "(Int with ?5(it))", "result": "?5(it)"}, "children": [{"event": {"$type": "OfType", "from": "Int", "result": "true"}, "children": [{"event": {"$type": "OfType", "from": "AnyVal {...}", "result": "true"}, "children": []}]}]},{"event": {"$type": "Push", "currentFacts": "true"}, "children": [{"event": {"$type": "Assume", "expr": "it >= 0"}, "children": []},{"event": {"$type": "Check", "from": "it >= 0", "to": "?5(it)", "result": "true"}, "children": [{"event": {"$type": "TryImply", "from": "it >= 0", "to": "?5(it)", "frozen": "true", "result": "false"}, "children": []},{"event": {"$type": "TryImply", "from": "it >= 0", "to": "?5(it)", "frozen": "false", "result": "true"}, "children": [{"event": {"$type": "TryAddImplicationToVar", "from": "it >= 0", "to": "?5(it)", "result": "true"}, "children": []}]}]}]},{"event": {"$type": "OfType", "from": "List[(Int with it >= 0)]", "result": "true"}, "children": [{"event": {"$type": "OfType", "from": "List", "result": "true"}, "children": [{"event": {"$type": "OfType", "from": "scala.collection.immutable.AbstractSeq[A] with \n  scala.collection.immutable.LinearSeq[A] with \n  scala.collection.immutable.LinearSeqOps[A, List, List[A]] with \n  scala.collection.StrictOptimizedLinearSeqOps[A, List, List[A]] with \n  scala.collection.immutable.StrictOptimizedSeqOps[A, List, List[A]] with \n  scala.collection.IterableFactoryDefaults[A, List] with \n  scala.collection.generic.DefaultSerializable {...}", "result": "true"}, "children": []}]}]},{"event": {"$type": "OfType", "from": "(List[(Int with ?5(it))] with ?6(it))", "result": "?6(it)"}, "children": [{"event": {"$type": "OfType", "from": "List[(Int with ?5(it))]", "result": "true"}, "children": [{"event": {"$type": "OfType", "from": "List", "result": "true"}, "children": [{"event": {"$type": "OfType", "from": "scala.collection.immutable.AbstractSeq[A] with \n  scala.collection.immutable.LinearSeq[A] with \n  scala.collection.immutable.LinearSeqOps[A, List, List[A]] with \n  scala.collection.StrictOptimizedLinearSeqOps[A, List, List[A]] with \n  scala.collection.immutable.StrictOptimizedSeqOps[A, List, List[A]] with \n  scala.collection.IterableFactoryDefaults[A, List] with \n  scala.collection.generic.DefaultSerializable {...}", "result": "true"}, "children": []}]}]}]},{"event": {"$type": "Push", "currentFacts": "true"}, "children": [{"event": {"$type": "Assume", "expr": "true"}, "children": []},{"event": {"$type": "Check", "from": "true", "to": "?6(it)", "result": "true"}, "children": [{"event": {"$type": "TryImply", "from": "true", "to": "?6(it)", "frozen": "true", "result": "false"}, "children": []},{"event": {"$type": "TryImply", "from": "true", "to": "?6(it)", "frozen": "false", "result": "true"}, "children": [{"event": {"$type": "TryAddImplicationToVar", "from": "true", "to": "?6(it)", "result": "true"}, "children": []}]}]}]}]},{"event": {"$type": "CheckExprConforms", "from": "(l1 : (List[(Int with ?2(it))] with ?3(it)))", "to": "SelectionProto(_,WildcardType(NoType),dotty.tools.dotc.typer.ProtoTypes$NoViewsAllowed$@115c946b,true,<no position>)", "result": "(l1 : (List[(Int with ?2(it))] with ?3(it)))"}, "children": []},{"event": {"$type": "TypeMap", "from": "?2(it)", "result": "?2(it)"}, "children": []},{"event": {"$type": "CheckExprConforms", "from": "(l1.++ : [B >: (Int with ?2(it))](suffix: IterableOnce[B]): List[B])", "to": "WildcardType(NoType)", "result": "(l1.++ : [B >: (Int with ?2(it))](suffix: IterableOnce[B]): List[B])"}, "children": []},{"event": {"$type": "TypeMap", "from": "?10(it)", "result": "?10(it)"}, "children": []},{"event": {"$type": "TypeMap", "from": "?10(it)", "result": "?10(it)"}, "children": []},{"event": {"$type": "CheckExprConforms", "from": "(suffix: IterableOnce[(Int with ?10(it))]): List[(Int with ?10(it))]", "to": "WildcardType(NoType)", "result": "(suffix: IterableOnce[(Int with ?10(it))]): List[(Int with ?10(it))]"}, "children": []},{"event": {"$type": "CheckExprConforms", "from": "(l2 : (List[(Int with ?5(it))] with ?6(it)))", "to": "AppliedType(TypeRef(ThisType(TypeRef(NoPrefix,module class collection)),trait IterableOnce),List(AnnotatedType(TypeRef(TermRef(ThisType(TypeRef(NoPrefix,module class <root>)),object scala),class Int),QualifiedAnnotation(ApplyVar(10,PredArg),TypeRef(TermRef(ThisType(TypeRef(NoPrefix,module class <root>)),object scala),class Int)))))", "result": "(l2 : (List[(Int with ?5(it))] with ?6(it)))"}, "children": [{"event": {"$type": "OfType", "from": "(Int with ?5(it))", "result": "?5(it)"}, "children": [{"event": {"$type": "OfType", "from": "Int", "result": "true"}, "children": [{"event": {"$type": "OfType", "from": "AnyVal {...}", "result": "true"}, "children": []}]}]},{"event": {"$type": "OfType", "from": "(Int with ?10(it))", "result": "?10(it)"}, "children": [{"event": {"$type": "OfType", "from": "Int", "result": "true"}, "children": [{"event": {"$type": "OfType", "from": "AnyVal {...}", "result": "true"}, "children": []}]}]},{"event": {"$type": "Push", "currentFacts": "true"}, "children": [{"event": {"$type": "Assume", "expr": "?5(it)"}, "children": []},{"event": {"$type": "Check", "from": "?5(it)", "to": "?10(it)", "result": "true"}, "children": [{"event": {"$type": "TryImply", "from": "?5(it)", "to": "?10(it)", "frozen": "true", "result": "false"}, "children": []},{"event": {"$type": "TryImply", "from": "?5(it)", "to": "?10(it)", "frozen": "false", "result": "true"}, "children": [{"event": {"$type": "TryAddImplicationToVar", "from": "?5(it)", "to": "?10(it)", "result": "true"}, "children": []}]}]}]},{"event": {"$type": "OfType", "from": "(IterableOnce[(Int with ?5(it))] with ?6(it))", "result": "?6(it)"}, "children": [{"event": {"$type": "OfType", "from": "IterableOnce[(Int with ?5(it))]", "result": "true"}, "children": [{"event": {"$type": "OfType", "from": "IterableOnce", "result": "true"}, "children": [{"event": {"$type": "OfType", "from": "Any {...}", "result": "true"}, "children": []}]}]}]},{"event": {"$type": "OfType", "from": "IterableOnce[(Int with ?10(it))]", "result": "true"}, "children": [{"event": {"$type": "OfType", "from": "IterableOnce", "result": "true"}, "children": [{"event": {"$type": "OfType", "from": "Any {...}", "result": "true"}, "children": []}]}]},{"event": {"$type": "Push", "currentFacts": "true"}, "children": [{"event": {"$type": "Assume", "expr": "?6(it)"}, "children": []},{"event": {"$type": "Check", "from": "?6(it)", "to": "true", "result": "true"}, "children": [{"event": {"$type": "TryImply", "from": "?6(it)", "to": "true", "frozen": "true", "result": "false"}, "children": []},{"event": {"$type": "TryImply", "from": "?6(it)", "to": "true", "frozen": "false", "result": "true"}, "children": [{"event": {"$type": "TryAddImplicationToLeaf", "from": "?6(it)", "to": "true", "result": "true"}, "children": [{"event": {"$type": "TryImply", "from": "true", "to": "true", "frozen": "false", "result": "true"}, "children": [{"event": {"$type": "LeafImplies", "from": "true", "to": "true", "result": "true"}, "children": []}]}]}]}]}]}]},{"event": {"$type": "CheckExprConforms", "from": "List[(Int with ?10(it))]", "to": "AnnotatedType(AppliedType(TypeRef(ThisType(TypeRef(NoPrefix,module class immutable)),class List),List(AnnotatedType(TypeRef(TermRef(ThisType(TypeRef(NoPrefix,module class <root>)),object scala),class Int),QualifiedAnnotation(ApplyVar(8,PredArg),TypeRef(TermRef(ThisType(TypeRef(NoPrefix,module class <root>)),object scala),class Int))))),QualifiedAnnotation(ApplyVar(9,PredArg),AppliedType(TypeRef(ThisType(TypeRef(NoPrefix,module class immutable)),class List),List(AnnotatedType(TypeRef(TermRef(ThisType(TypeRef(NoPrefix,module class <root>)),object scala),class Int),QualifiedAnnotation(ApplyVar(8,PredArg),TypeRef(TermRef(ThisType(TypeRef(NoPrefix,module class <root>)),object scala),class Int)))))))", "result": "List[(Int with ?10(it))]"}, "children": [{"event": {"$type": "OfType", "from": "(Int with ?10(it))", "result": "?10(it)"}, "children": [{"event": {"$type": "OfType", "from": "Int", "result": "true"}, "children": [{"event": {"$type": "OfType", "from": "AnyVal {...}", "result": "true"}, "children": []}]}]},{"event": {"$type": "OfType", "from": "(Int with ?8(it))", "result": "?8(it)"}, "children": [{"event": {"$type": "OfType", "from": "Int", "result": "true"}, "children": [{"event": {"$type": "OfType", "from": "AnyVal {...}", "result": "true"}, "children": []}]}]},{"event": {"$type": "Push", "currentFacts": "true"}, "children": [{"event": {"$type": "Assume", "expr": "?10(it)"}, "children": []},{"event": {"$type": "Check", "from": "?10(it)", "to": "?8(it)", "result": "true"}, "children": [{"event": {"$type": "TryImply", "from": "?10(it)", "to": "?8(it)", "frozen": "true", "result": "false"}, "children": []},{"event": {"$type": "TryImply", "from": "?10(it)", "to": "?8(it)", "frozen": "false", "result": "true"}, "children": [{"event": {"$type": "TryAddImplicationToVar", "from": "?10(it)", "to": "?8(it)", "result": "true"}, "children": []}]}]}]},{"event": {"$type": "OfType", "from": "List[(Int with ?10(it))]", "result": "true"}, "children": [{"event": {"$type": "OfType", "from": "List", "result": "true"}, "children": [{"event": {"$type": "OfType", "from": "scala.collection.immutable.AbstractSeq[A] with \n  scala.collection.immutable.LinearSeq[A] with \n  scala.collection.immutable.LinearSeqOps[A, List, List[A]] with \n  scala.collection.StrictOptimizedLinearSeqOps[A, List, List[A]] with \n  scala.collection.immutable.StrictOptimizedSeqOps[A, List, List[A]] with \n  scala.collection.IterableFactoryDefaults[A, List] with \n  scala.collection.generic.DefaultSerializable {...}", "result": "true"}, "children": []}]}]},{"event": {"$type": "OfType", "from": "(List[(Int with ?8(it))] with ?9(it))", "result": "?9(it)"}, "children": [{"event": {"$type": "OfType", "from": "List[(Int with ?8(it))]", "result": "true"}, "children": [{"event": {"$type": "OfType", "from": "List", "result": "true"}, "children": [{"event": {"$type": "OfType", "from": "scala.collection.immutable.AbstractSeq[A] with \n  scala.collection.immutable.LinearSeq[A] with \n  scala.collection.immutable.LinearSeqOps[A, List, List[A]] with \n  scala.collection.StrictOptimizedLinearSeqOps[A, List, List[A]] with \n  scala.collection.immutable.StrictOptimizedSeqOps[A, List, List[A]] with \n  scala.collection.IterableFactoryDefaults[A, List] with \n  scala.collection.generic.DefaultSerializable {...}", "result": "true"}, "children": []}]}]}]},{"event": {"$type": "Push", "currentFacts": "true"}, "children": [{"event": {"$type": "Assume", "expr": "true"}, "children": []},{"event": {"$type": "Check", "from": "true", "to": "?9(it)", "result": "true"}, "children": [{"event": {"$type": "TryImply", "from": "true", "to": "?9(it)", "frozen": "true", "result": "false"}, "children": []},{"event": {"$type": "TryImply", "from": "true", "to": "?9(it)", "frozen": "false", "result": "true"}, "children": [{"event": {"$type": "TryAddImplicationToVar", "from": "true", "to": "?9(it)", "result": "true"}, "children": []}]}]}]}]},{"event": {"$type": "CheckExprConforms", "from": "(l3 : (List[(Int with ?8(it))] with ?9(it)))", "to": "AppliedType(TypeRef(ThisType(TypeRef(NoPrefix,module class immutable)),class List),List(AnnotatedType(TypeRef(TermRef(ThisType(TypeRef(NoPrefix,module class <root>)),object scala),class Int),QualifiedAnnotation(GreaterEqual(PredArg,IntConst(0)),TypeRef(TermRef(ThisType(TypeRef(NoPrefix,module class <root>)),object scala),class Int)))))", "result": "(l3 : (List[(Int with ?8(it))] with ?9(it)))"}, "children": [{"event": {"$type": "OfType", "from": "(Int with ?8(it))", "result": "?8(it)"}, "children": [{"event": {"$type": "OfType", "from": "Int", "result": "true"}, "children": [{"event": {"$type": "OfType", "from": "AnyVal {...}", "result": "true"}, "children": []}]}]},{"event": {"$type": "OfType", "from": "(Int with it >= 0)", "result": "it >= 0"}, "children": [{"event": {"$type": "OfType", "from": "Int", "result": "true"}, "children": [{"event": {"$type": "OfType", "from": "AnyVal {...}", "result": "true"}, "children": []}]}]},{"event": {"$type": "Push", "currentFacts": "true"}, "children": [{"event": {"$type": "Assume", "expr": "?8(it)"}, "children": []},{"event": {"$type": "Check", "from": "?8(it)", "to": "it >= 0", "result": "true"}, "children": [{"event": {"$type": "TryImply", "from": "?8(it)", "to": "it >= 0", "frozen": "true", "result": "false"}, "children": []},{"event": {"$type": "TryImply", "from": "?8(it)", "to": "it >= 0", "frozen": "false", "result": "true"}, "children": [{"event": {"$type": "TryAddImplicationToLeaf", "from": "?8(it)", "to": "it >= 0", "result": "true"}, "children": [{"event": {"$type": "TryImply", "from": "it >= 0", "to": "it >= 0", "frozen": "false", "result": "true"}, "children": [{"event": {"$type": "LeafImplies", "from": "it >= 0", "to": "it >= 0", "result": "true"}, "children": []}]}]}]}]}]},{"event": {"$type": "OfType", "from": "(List[(Int with ?8(it))] with ?9(it))", "result": "?9(it)"}, "children": [{"event": {"$type": "OfType", "from": "List[(Int with ?8(it))]", "result": "true"}, "children": [{"event": {"$type": "OfType", "from": "List", "result": "true"}, "children": [{"event": {"$type": "OfType", "from": "scala.collection.immutable.AbstractSeq[A] with \n  scala.collection.immutable.LinearSeq[A] with \n  scala.collection.immutable.LinearSeqOps[A, List, List[A]] with \n  scala.collection.StrictOptimizedLinearSeqOps[A, List, List[A]] with \n  scala.collection.immutable.StrictOptimizedSeqOps[A, List, List[A]] with \n  scala.collection.IterableFactoryDefaults[A, List] with \n  scala.collection.generic.DefaultSerializable {...}", "result": "true"}, "children": []}]}]}]},{"event": {"$type": "OfType", "from": "List[(Int with it >= 0)]", "result": "true"}, "children": [{"event": {"$type": "OfType", "from": "List", "result": "true"}, "children": [{"event": {"$type": "OfType", "from": "scala.collection.immutable.AbstractSeq[A] with \n  scala.collection.immutable.LinearSeq[A] with \n  scala.collection.immutable.LinearSeqOps[A, List, List[A]] with \n  scala.collection.StrictOptimizedLinearSeqOps[A, List, List[A]] with \n  scala.collection.immutable.StrictOptimizedSeqOps[A, List, List[A]] with \n  scala.collection.IterableFactoryDefaults[A, List] with \n  scala.collection.generic.DefaultSerializable {...}", "result": "true"}, "children": []}]}]},{"event": {"$type": "Push", "currentFacts": "true"}, "children": [{"event": {"$type": "Assume", "expr": "?9(it)"}, "children": []},{"event": {"$type": "Check", "from": "?9(it)", "to": "true", "result": "true"}, "children": [{"event": {"$type": "TryImply", "from": "?9(it)", "to": "true", "frozen": "true", "result": "false"}, "children": []},{"event": {"$type": "TryImply", "from": "?9(it)", "to": "true", "frozen": "false", "result": "true"}, "children": [{"event": {"$type": "TryAddImplicationToLeaf", "from": "?9(it)", "to": "true", "result": "true"}, "children": [{"event": {"$type": "TryImply", "from": "true", "to": "true", "frozen": "false", "result": "true"}, "children": [{"event": {"$type": "LeafImplies", "from": "true", "to": "true", "result": "true"}, "children": []}]}]}]}]}]}]},{"event": {"$type": "CheckExprConforms", "from": "Unit", "to": "WildcardType(NoType)", "result": "Unit"}, "children": []},{"event": {"$type": "CheckExprConforms", "from": "Unit", "to": "AnnotatedType(TypeRef(ThisType(TypeRef(NoPrefix,module class scala)),class Unit),QualifiedAnnotation(ApplyVar(1,PredArg),TypeRef(ThisType(TypeRef(NoPrefix,module class scala)),class Unit)))", "result": "Unit"}, "children": [{"event": {"$type": "OfType", "from": "Unit", "result": "true"}, "children": [{"event": {"$type": "OfType", "from": "AnyVal {...}", "result": "true"}, "children": []}]},{"event": {"$type": "OfType", "from": "(Unit with ?1(it))", "result": "?1(it)"}, "children": [{"event": {"$type": "OfType", "from": "Unit", "result": "true"}, "children": [{"event": {"$type": "OfType", "from": "AnyVal {...}", "result": "true"}, "children": []}]}]},{"event": {"$type": "Push", "currentFacts": "true"}, "children": [{"event": {"$type": "Assume", "expr": "true"}, "children": []},{"event": {"$type": "Check", "from": "true", "to": "?1(it)", "result": "true"}, "children": [{"event": {"$type": "TryImply", "from": "true", "to": "?1(it)", "frozen": "true", "result": "false"}, "children": []},{"event": {"$type": "TryImply", "from": "true", "to": "?1(it)", "frozen": "false", "result": "true"}, "children": [{"event": {"$type": "TryAddImplicationToVar", "from": "true", "to": "?1(it)", "result": "true"}, "children": []}]}]}]}]},{"event": {"$type": "CheckExprConforms", "from": "<notype>", "to": "WildcardType(NoType)", "result": "<notype>"}, "children": []},{"event": {"$type": "TypeMap", "from": "it == 1 or it == 2 or it == 3 or true", "result": "it == 1 or it == 2 or it == 3 or true"}, "children": []},{"event": {"$type": "TypeMap", "from": "it == 1 or it == 2 or it == 3 or true", "result": "it == 1 or it == 2 or it == 3 or true"}, "children": []},{"event": {"$type": "TypeMap", "from": "it == 1 or it == 2 or it == 3 or true", "result": "it == 1 or it == 2 or it == 3 or true"}, "children": []},{"event": {"$type": "TypeMap", "from": "it < 10", "result": "it < 10"}, "children": []},{"event": {"$type": "TypeMap", "from": "it == 0 or it == 2 or it == 3 or true", "result": "it == 0 or it == 2 or it == 3 or true"}, "children": []},{"event": {"$type": "TypeMap", "from": "it == 0 or it == 2 or it == 3 or true", "result": "it == 0 or it == 2 or it == 3 or true"}, "children": []},{"event": {"$type": "TypeMap", "from": "it == 0 or it == 2 or it == 3 or true", "result": "it == 0 or it == 2 or it == 3 or true"}, "children": []},{"event": {"$type": "TypeMap", "from": "it >= 0", "result": "it >= 0"}, "children": []},{"event": {"$type": "TypeMap", "from": "it >= 0", "result": "it >= 0"}, "children": []},{"event": {"$type": "TypeMap", "from": "it >= 0", "result": "it >= 0"}, "children": []},{"event": {"$type": "TypeMap", "from": "it >= 0", "result": "it >= 0"}, "children": []}],
  "naiveSolverVars": [{"exprs": ["true","?1(it)","it < 10","?2(it)","?3(it)","it == 1","?4(it)","it == 2","it == 3","it >= 0","?5(it)","?6(it)","it == 0","?7(it)","?10(it)","?8(it)","?9(it)"], "dependencies": [["0","1"],["2","3"],["0","4"],["5","6"],["7","6"],["8","6"],["0","6"],["9","10"],["0","11"],["12","13"],["7","13"],["8","13"],["0","13"],["14","15"],["0","16"],["10","14"],["11","0"],["15","9"],["16","0"]]}],
  "treeBefore": "package <empty> {\n  final lazy module val listConcat$package: listConcat$package =\n    new listConcat$package()\n  @SourceFile(\"tests/pos-custom-args/qualified-types/listConcat.scala\") final\n    module class listConcat$package() extends Object() {\n    private def writeReplace(): AnyRef =\n      new scala.runtime.ModuleSerializationProxy(\n        classOf[listConcat$package.type])\n    def test: Unit =\n      {\n        val l1: List[(Int with it < 10)] =\n          List.apply[Int]([1,2,3 : Int]).asInstanceOf[List[(Int with it < 10)]]\n        val l2: List[(Int with it >= 0)] =\n          List.apply[Int]([0,2,3 : Int]).asInstanceOf[List[(Int with it >= 0)]]\n        val l3: List[(Int with it < 10)] = l1.++[(Int with it < 10)](l2)\n        val l4: List[(Int with it >= 0)] = l3\n        ()\n      }\n  }\n}",
  "treeSetup": "package <empty> {\n  final lazy module val listConcat$package: listConcat$package =\n    new listConcat$package()\n  @SourceFile(\"tests/pos-custom-args/qualified-types/listConcat.scala\") final\n    module class listConcat$package() extends Object() {\n    private def writeReplace(): AnyRef =\n      new scala.runtime.ModuleSerializationProxy(\n        classOf[listConcat$package.type])\n    def test: (Unit with ?1(it)) =\n      {\n        val l1: (List[(Int with ?2(it))] with ?3(it)) =\n          List.apply[(Int with ?4(it))]([1,2,3 : Int]).asInstanceOf[\n            List[(Int with it < 10)]]\n        val l2: (List[(Int with ?5(it))] with ?6(it)) =\n          List.apply[(Int with ?7(it))]([0,2,3 : Int]).asInstanceOf[\n            List[(Int with it >= 0)]]\n        val l3: (List[(Int with ?8(it))] with ?9(it)) =\n          l1.++[(Int with ?10(it))](l2)\n        val l4: List[(Int with it >= 0)] = l3\n        ()\n      }\n  }\n}",
  "treeAfter": "package <empty> {\n  final lazy module val listConcat$package: listConcat$package =\n    new listConcat$package()\n  @SourceFile(\"tests/pos-custom-args/qualified-types/listConcat.scala\") final\n    module class listConcat$package() extends Object() {\n    private def writeReplace(): AnyRef =\n      new scala.runtime.ModuleSerializationProxy(\n        classOf[listConcat$package.type])\n    def test: Unit =\n      {\n        val l1: List[(Int with it < 10)] =\n          List.apply[(Int with it == 1 or it == 2 or it == 3 or true)](\n            [1,2,3 : Int]).asInstanceOf[List[(Int with it < 10)]]\n        val l2: List[(Int with it >= 0)] =\n          List.apply[(Int with it == 0 or it == 2 or it == 3 or true)](\n            [0,2,3 : Int]).asInstanceOf[List[(Int with it >= 0)]]\n        val l3: List[(Int with it >= 0)] = l1.++[(Int with it >= 0)](l2)\n        val l4: List[(Int with it >= 0)] = l3\n        ()\n      }\n  }\n}"
}