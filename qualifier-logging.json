
{
  "trace": [{"event": {"$type": "OfType", "from": "(10 : scala.this.Int)", "result": "it == 10"}, "children": []},{"event": {"$type": "OfType", "from": "(scala.this.Int with ?0(it))", "result": "?0(it)"}, "children": [{"event": {"$type": "OfType", "from": "scala.this.Int", "result": "true"}, "children": [{"event": {"$type": "OfType", "from": "scala.this.AnyVal {...}", "result": "true"}, "children": []}]}]},{"event": {"$type": "Push", "currentFacts": "true"}, "children": [{"event": {"$type": "Assume", "expr": "it == 10"}, "children": []},{"event": {"$type": "Check", "from": "it == 10", "to": "?0(it)", "result": "true"}, "children": [{"event": {"$type": "TryImply", "from": "it == 10", "to": "?0(it)", "frozen": "true", "result": "false"}, "children": []},{"event": {"$type": "TryImply", "from": "it == 10", "to": "?0(it)", "frozen": "false", "result": "true"}, "children": [{"event": {"$type": "TryAddImplicationToVar", "from": "it == 10", "to": "?0(it)", "result": "true"}, "children": []}]}]}]},{"event": {"$type": "TypeMap", "from": "it == 10", "result": "it == 10"}, "children": []},{"event": {"$type": "TypeMap", "from": "it == 10", "result": "it == 10"}, "children": []},{"event": {"$type": "TypeMap", "from": "?1(it)", "result": "?1(it)"}, "children": []},{"event": {"$type": "OfType", "from": "(<root>.this.scala.Int with it == 10)", "result": "it == 10"}, "children": [{"event": {"$type": "OfType", "from": "<root>.this.scala.Int", "result": "true"}, "children": [{"event": {"$type": "OfType", "from": "scala.this.AnyVal {...}", "result": "true"}, "children": []}]}]},{"event": {"$type": "OfType", "from": "(<root>.this.scala.Int with it == 10)", "result": "it == 10"}, "children": [{"event": {"$type": "OfType", "from": "<root>.this.scala.Int", "result": "true"}, "children": [{"event": {"$type": "OfType", "from": "scala.this.AnyVal {...}", "result": "true"}, "children": []}]}]},{"event": {"$type": "Push", "currentFacts": "true"}, "children": [{"event": {"$type": "Assume", "expr": "it == 10"}, "children": []},{"event": {"$type": "Check", "from": "it == 10", "to": "it == 10", "result": "true"}, "children": [{"event": {"$type": "TryImply", "from": "it == 10", "to": "it == 10", "frozen": "true", "result": "true"}, "children": [{"event": {"$type": "LeafImplies", "from": "it == 10", "to": "it == 10", "result": "true"}, "children": []}]}]}]},{"event": {"$type": "OfType", "from": "(<root>.this.scala.Int with it == 10)", "result": "it == 10"}, "children": [{"event": {"$type": "OfType", "from": "<root>.this.scala.Int", "result": "true"}, "children": [{"event": {"$type": "OfType", "from": "scala.this.AnyVal {...}", "result": "true"}, "children": []}]}]},{"event": {"$type": "OfType", "from": "<root>.this.scala.Int", "result": "true"}, "children": [{"event": {"$type": "OfType", "from": "scala.this.AnyVal {...}", "result": "true"}, "children": []}]},{"event": {"$type": "Push", "currentFacts": "true"}, "children": [{"event": {"$type": "Assume", "expr": "it == 10"}, "children": []},{"event": {"$type": "Check", "from": "it == 10", "to": "true", "result": "true"}, "children": [{"event": {"$type": "TryImply", "from": "it == 10", "to": "true", "frozen": "true", "result": "true"}, "children": [{"event": {"$type": "LeafImplies", "from": "it == 10", "to": "true", "result": "true"}, "children": []}]}]}]},{"event": {"$type": "OfType", "from": "(y : (<root>.this.scala.Int with it == 10))", "result": "it == y"}, "children": []},{"event": {"$type": "OfType", "from": "(<root>.this.scala.Int with ?1(it))", "result": "?1(it)"}, "children": [{"event": {"$type": "OfType", "from": "<root>.this.scala.Int", "result": "true"}, "children": [{"event": {"$type": "OfType", "from": "scala.this.AnyVal {...}", "result": "true"}, "children": []}]}]},{"event": {"$type": "OfType", "from": "(<root>.this.scala.Int with it == 10)", "result": "it == 10"}, "children": [{"event": {"$type": "OfType", "from": "<root>.this.scala.Int", "result": "true"}, "children": [{"event": {"$type": "OfType", "from": "scala.this.AnyVal {...}", "result": "true"}, "children": []}]}]},{"event": {"$type": "Push", "currentFacts": "true"}, "children": [{"event": {"$type": "Assume", "expr": "it == y and y == 10"}, "children": []},{"event": {"$type": "Check", "from": "it == y and y == 10", "to": "?1(it)", "result": "true"}, "children": [{"event": {"$type": "TryImply", "from": "it == y and y == 10", "to": "?1(it)", "frozen": "true", "result": "false"}, "children": []},{"event": {"$type": "TryImply", "from": "it == y and y == 10", "to": "?1(it)", "frozen": "false", "result": "true"}, "children": [{"event": {"$type": "TryAddImplicationToVar", "from": "it == y and y == 10", "to": "?1(it)", "result": "true"}, "children": []}]}]}]},{"event": {"$type": "TypeMap", "from": "?1(it)", "result": "?1(it)"}, "children": []},{"event": {"$type": "TypeMap", "from": "?1(it)", "result": "?1(it)"}, "children": []},{"event": {"$type": "OfType", "from": "(<root>.this.scala.Int with ?1(it))", "result": "?1(it)"}, "children": [{"event": {"$type": "OfType", "from": "<root>.this.scala.Int", "result": "true"}, "children": [{"event": {"$type": "OfType", "from": "scala.this.AnyVal {...}", "result": "true"}, "children": []}]}]},{"event": {"$type": "OfType", "from": "<root>.this.scala.Int", "result": "true"}, "children": [{"event": {"$type": "OfType", "from": "scala.this.AnyVal {...}", "result": "true"}, "children": []}]},{"event": {"$type": "Push", "currentFacts": "true"}, "children": [{"event": {"$type": "Assume", "expr": "?1(it)"}, "children": []},{"event": {"$type": "Check", "from": "?1(it)", "to": "true", "result": "true"}, "children": [{"event": {"$type": "TryImply", "from": "?1(it)", "to": "true", "frozen": "true", "result": "false"}, "children": []},{"event": {"$type": "TryImply", "from": "?1(it)", "to": "true", "frozen": "false", "result": "true"}, "children": [{"event": {"$type": "TryAddImplicationToLeaf", "from": "?1(it)", "to": "true", "result": "true"}, "children": [{"event": {"$type": "TryImply", "from": "it == y and y == 10", "to": "true", "frozen": "false", "result": "true"}, "children": [{"event": {"$type": "LeafImplies", "from": "it == y and y == 10", "to": "true", "result": "true"}, "children": []}]}]}]}]}]},{"event": {"$type": "TypeMap", "from": "it == 10", "result": "it == 10"}, "children": []},{"event": {"$type": "TypeMap", "from": "it == 10", "result": "it == 10"}, "children": []},{"event": {"$type": "TypeMap", "from": "it == y and y == 10", "result": "it == y and y == 10"}, "children": []}],
  "naiveSolverVars": [{"exprs": ["it == 10","?0(it)","it == y and y == 10","?1(it)","true"], "dependencies": [["0","1"],["2","3"],["3","4"]]}],
  "treeBefore": "package <root>.this.<empty> {\n  final lazy module val 08_case_val$package: <empty>.this.08_case_val$package$\n     = new <empty>.this.08_case_val$package$.<init>()\n  @SourceFile(\"tests/pos-custom-args/qualified-types/08_case_val.scala\") final\n    module class 08_case_val$package$() extends Object.<init>() {\n    private def writeReplace(): scala.this.AnyRef =\n      new runtime.this.ModuleSerializationProxy.<init>(\n        classOf[<empty>.this.08_case_val$package.type])\n    def main: <root>.this.scala.Int(inf) =\n      {\n        val x: scala.this.Int(inf) = 10\n        matchResult1[<root>.this.scala.Int]: \n          {\n            case val x1: (x : (scala.this.Int with ?0(it)))(inf) = x\n            if \n              x1.$isInstanceOf$[\n                \n                  <root>.this.scala.Int @qualified[<root>.this.scala.Int](\n                    {\n                      def $anonfun(z: <root>.this.scala.Int):\n                        <root>.this.scala.Boolean(inf) = z.==(10)\n                      closure($anonfun)\n                    }\n                  )\n                \n              ]\n             then\n              {\n                case val y:\n                  \n                    <root>.this.scala.Int @qualified[<root>.this.scala.Int](\n                      {\n                        def $anonfun(z: <root>.this.scala.Int):\n                          <root>.this.scala.Boolean(inf) = z.==(10)\n                        closure($anonfun)\n                      }\n                    )\n                  (inf)\n                 =\n                  x1.$asInstanceOf$[\n                    \n                      <root>.this.scala.Int @qualified[<root>.this.scala.Int](\n                        {\n                          def $anonfun(z: <root>.this.scala.Int):\n                            <root>.this.scala.Boolean(inf) = z.==(10)\n                          closure($anonfun)\n                        }\n                      )\n                    \n                  ]\n                return[matchResult1]\n                  {\n                    y:<root>.this.scala.Int(inf)\n                  }\n              }\n             else ()\n            throw new scala.this.MatchError.<init>(x1)\n          }\n      }\n  }\n}",
  "treeSetup": "package <root>.this.<empty> {\n  final lazy module val 08_case_val$package: <empty>.this.08_case_val$package$\n     = new <empty>.this.08_case_val$package$.<init>()\n  @SourceFile(\"tests/pos-custom-args/qualified-types/08_case_val.scala\") final\n    module class 08_case_val$package$() extends Object.<init>() {\n    private def writeReplace(): scala.this.AnyRef =\n      new runtime.this.ModuleSerializationProxy.<init>(\n        classOf[<empty>.this.08_case_val$package.type])\n    def main: <root>.this.scala.Int(inf) =\n      {\n        val x: (scala.this.Int with ?0(it))(inf) = 10\n        matchResult1[<root>.this.scala.Int]: \n          {\n            case val x1: (x : (scala.this.Int with ?0(it)))(inf) = x\n            if x1.$isInstanceOf$[(<root>.this.scala.Int with it == 10)] then\n              {\n                case val y: (<root>.this.scala.Int with it == 10)(inf) =\n                  x1.$asInstanceOf$[(<root>.this.scala.Int with it == 10)]\n                return[matchResult1]\n                  {\n                    y:(<root>.this.scala.Int with ?1(it))(inf)\n                  }\n              }\n             else ()\n            throw new scala.this.MatchError.<init>(x1)\n          }\n      }\n  }\n}",
  "treeAfter": "package <root>.this.<empty> {\n  final lazy module val 08_case_val$package: <empty>.this.08_case_val$package$\n     = new <empty>.this.08_case_val$package$.<init>()\n  @SourceFile(\"tests/pos-custom-args/qualified-types/08_case_val.scala\") final\n    module class 08_case_val$package$() extends Object.<init>() {\n    private def writeReplace(): scala.this.AnyRef =\n      new runtime.this.ModuleSerializationProxy.<init>(\n        classOf[<empty>.this.08_case_val$package.type])\n    def main: <root>.this.scala.Int(inf) =\n      {\n        val x: (scala.this.Int with it == 10)(inf) = 10\n        matchResult1[<root>.this.scala.Int]: \n          {\n            case val x1: (x : (scala.this.Int with ?0(it)))(inf) = x\n            if x1.$isInstanceOf$[(<root>.this.scala.Int with it == 10)] then\n              {\n                case val y: (<root>.this.scala.Int with it == 10)(inf) =\n                  x1.$asInstanceOf$[(<root>.this.scala.Int with it == 10)]\n                return[matchResult1]\n                  {\n                    y:(<root>.this.scala.Int with it == y and y == 10)(inf)\n                  }\n              }\n             else ()\n            throw new scala.this.MatchError.<init>(x1)\n          }\n      }\n  }\n}"
}